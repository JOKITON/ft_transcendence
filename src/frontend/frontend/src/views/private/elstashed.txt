<template>
  <NavHome></NavHome>

  <!-- ---------------------------------------------------------------- -->
  <NavIndex></NavIndex>
  <div class = "container">
    <div class ="profileUpdate-form">
      <div class ="card">
        <h2 class="card-header text-center mb-4 oswald-header">Profile</h2>
        <form id="profileUpdate" @submit.prevent="saveChanges">
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input
              id="username"
              v-model="form.username"
              type="text"
              name="username"
              class="form-control"
              placeholder="Enter your username"
              required
              autofocus
            />
          </div>
          <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary btn-block">Save</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- ---------------------------------------------------------------- -->
</template>
<script setup lang="ts">
import { ref, onMounted, inject } from 'vue';
import NavHome from './NavHome.vue';
import NavIndex from '../public/NavIndex.vue';
import userUpdateRequest from '@/models/user/userUpdateRequest';

const api: Api = inject('$api') as Api;

const isEditing = ref(false);
const username = ref('User');
const email = ref('email');
const nickname = ref('nickname');


const form: Ref<userUpdateRequest> = ref<userUpdateRequest>({
  username: '',
})
const originalUser = ref({
  fullName: username ? username : '(None)',
  email: email ? email : '(None)',
  nickname:  nickname ? nickname : '(None)',
  mobile: '(320) 380-4539',
  address: 'Bay Area, San Francisco, CA',
});


const user = ref({ ...originalUser.value });

function toggleEdit() {
  if (isEditing.value) {
    // Si se cancela, se restauran los valores originales
    user.value = { ...originalUser.value };
  } else {
    // Iniciar la ediciÃ³n
    user.value = { ...originalUser.value };
  }
  isEditing.value = !isEditing.value;
}

const saveChanges: () => Promise<void> = async () => {
  try {
    const response = await api.post("update-profile",form.value)
    console.log('saved successful ', response)
  } catch (error: any) {
    window.alert('An error occurred while submitting the form')
    console.error('An error occurred while submitting the form:', error)
  }
}
const fetchUsername = async () => {
  try {
    const response = await api.get('whoami');
    username.value = response.username; 
    console.log("Usuario:", username.value);
  } catch (error) {
    console.error('Error fetching username:', error.response?.username || error.message);
  }
};

const fetchEmail = async () => {
  try {
    const response = await api.get('whoami');
    email.value = response.email; 
    console.log("Email:", email.value);
  } catch (error) {
    console.error('Error fetching email:', error.response?.email || error.message);
  }
};

const fetchNickname = async () => {
  try {
    const response = await api.get('whoami');
    nickname.value = response.nickname; 
    console.log("Nickname:", nickname.value);
  } catch (error) {
    console.error('Error fetching nickname:', error.response?.nickname || error.message);
  }
};

onMounted(async () => {
  await Promise.all([fetchUsername(), fetchEmail(), fetchNickname()]);
});
</script>


<style scoped>
body {
  margin-top: 20px;
  color: #1a202c;
  text-align: left;
  background-color: #e2e8f0;
}

.main-body {
  padding: 15px;
}

.card {
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, .1), 0 1px 2px 0 rgba(0, 0, 0, .06);
}

.card {
  position: relative;
  display: flex;
  flex-direction: column;
  min-width: 0;
  word-wrap: break-word;
  background-color: #fff;
  background-clip: border-box;
  border: 0 solid rgba(0, 0, 0, .125);
  border-radius: .25rem;
}

.card-h {
  height: 40em;
}

.card-body {
  flex: 1 1 auto;
  min-height: 1px;
  padding: 1rem;
}

.gutters-sm {
  margin-right: -8px;
  margin-left: -8px;
}

.gutters-sm>.col,
.gutters-sm>[class*=col-] {
  padding-right: 8px;
  padding-left: 8px;
}

.mb-3,
.my-3 {
  margin-bottom: 1rem !important;
}

.bg-gray-300 {
  background-color: #e2e8f0;
}

.h-100 {
  height: 100% !important;
}

.shadow-none {
  box-shadow: none !important;
}




.friends-section {
  background-color: #fff;
  padding: 20px;
  margin-bottom: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.friends-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.friend-item {
  display: flex;
  align-items: center;
  padding: 10px 0;
  border-bottom: 1px solid #ddd;
}

.friend-item:last-child {
  border-bottom: none;
}

.status-indicator {
  display: inline-block;
  width: 10px;
  height: 10px;
  margin-right: 10px;
  border-radius: 50%;
}

.online {
  background-color: green;
}

.offline {
  background-color: red;
}

.card-body2 {
  padding: 20px;
}

.d-flex {
  display: flex;
}

.justify-content-between {
  justify-content: space-between;
}


.form-control {
  width: 100%;
  margin-bottom: 10px;
}
</style>